services:
  user-service:
    build:
      context: ../services/user-service
      dockerfile: ../../local-docker/dockerfiles/user.dockerfile
    networks:
      - backend
    env_file:
      - .env.example
    develop:
      watch:
        - action: rebuild
          path: ../services/user-service
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - "44044:44044"
#    healthcheck:
#      test: [ "CMD", "grpc_health_probe", "-addr=localhost:44044" ]
#      interval: 10s
#      timeout: 3s
#      retries: 3
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
  team-service:
    build:
      context: ../services/team-service
      dockerfile: ../../local-docker/dockerfiles/team.dockerfile
    networks:
      - backend
    env_file:
      - .env.example
    develop:
      watch:
        - action: rebuild
          path: ../services/team-service
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - "44045:44045"
#    healthcheck:
#      test: [ "CMD", "grpc_health_probe", "-addr=localhost:44045" ]
#      interval: 10s
#      timeout: 3s
#      retries: 3
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
  auth-service:
    build:
      context: ../services/auth-service
      dockerfile: ../../local-docker/dockerfiles/auth.dockerfile
    networks:
      - backend
    env_file:
      - .env.example
    develop:
      watch:
        - action: rebuild
          path: ../services/auth-service
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - "44046:44046"
#    healthcheck:
#      test: [ "CMD", "grpc_health_probe", "-addr=localhost:44046" ]
#      interval: 10s
#      timeout: 3s
#      retries: 3
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
  task-service:
    build:
      context: ../services/task-service
      dockerfile: ../../local-docker/dockerfiles/task.dockerfile
    networks:
      - backend
    ports:
      - "44049:44049"
    env_file:
      - .env.example
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
#    healthcheck:
#      test: [ "CMD", "grpc_health_probe", "-addr=localhost:44049" ]
#      interval: 10s
#      timeout: 3s
#      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
  board-service:
    build:
      context: ../services/board-service
      dockerfile: ../../local-docker/dockerfiles/board.dockerfile
    networks:
      - backend
    ports:
      - "44048:44048"
    env_file:
      - .env.example
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
#    healthcheck:
#      test: [ "CMD", "grpc_health_probe", "-addr=localhost:44048" ]
#      interval: 10s
#      timeout: 3s
#      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
  saga-orchestrator:
    build:
      context: ../services/saga-orchestrator
      dockerfile: ../../local-docker/dockerfiles/saga-orchestrator.dockerfile
    networks:
      - backend
    env_file:
      - .env.example
    develop:
      watch:
        - action: rebuild
          path: ../services/saga-orchestrator
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - "44047:44047"
    depends_on:
      kafka:
          condition: service_healthy
      redis:
        condition: service_healthy
networks:
  backend:
    name: backend
    external: true